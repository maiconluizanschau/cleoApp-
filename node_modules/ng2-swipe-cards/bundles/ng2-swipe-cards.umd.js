var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/platform-browser')) :
        typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/platform-browser'], factory) :
            (factory((global.angular2Modal = global.angular2Modal || {}), global.ng.core, global.ng.common, global.ng.platformBrowser));
}(this, function (exports, _angular_core, _angular_common, _angular_platformBrowser) {
    'use strict';
    var CardComponent = (function () {
        function CardComponent(el, renderer) {
            this.el = el;
            this.renderer = renderer;
            this.fixed = false;
            this._orientation = 'xy';
            this.released = false;
            this.onRelease = new _angular_core.EventEmitter();
            this.onSwipe = new _angular_core.EventEmitter();
            this.onAbort = new _angular_core.EventEmitter();
            this.direction = { x: 0, y: 0 };
            this.element = el.nativeElement;
        }
        Object.defineProperty(CardComponent.prototype, "orientation", {
            set: function (value) {
                this._orientation = value || "xy";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CardComponent.prototype, "callDestroy", {
            set: function (value) {
                this._callDestroy = value || new _angular_core.EventEmitter();
                this.initCallDestroy();
            },
            enumerable: true,
            configurable: true
        });
        CardComponent.prototype.translate = function (params) {
            if (!this.fixed && !this.released) {
                this.renderer.setElementStyle(this.element, "transition", "transform " + (params.time || 0) + "s ease");
                this.renderer.setElementStyle(this.element, "webkitTransform", "translate3d(" +
                    (params.x && (!this._orientation || this._orientation.indexOf("x") != -1) ? (params.x) : 0) +
                    "px, " +
                    (params.y && (!this._orientation || this._orientation.indexOf("y") != -1) ? (params.y) : 0) +
                    "px, 0) rotate(" + (params.rotate || 0) + "deg)");
            }
        };
        CardComponent.prototype.onSwipeCb = function (event) {
            var rotate = ((event.deltaX * 20) / this.element.clientWidth);
            this.direction.x = event.deltaX > 0 ? 1 : -1;
            this.direction.y = event.deltaY > 0 ? 1 : -1;
            this.translate({
                x: event.deltaX,
                y: event.deltaY
            });
        };
        CardComponent.prototype.onAbortCb = function (event) {
            this.translate({
                x: 0,
                y: 0,
                rotate: 0,
                time: 0.2
            });
        };
        CardComponent.prototype.ngOnInit = function () {
            this._callDestroy = this._callDestroy || new _angular_core.EventEmitter();
            this.initCallDestroy();
        };
        CardComponent.prototype.initCallDestroy = function () {
            var _this = this;
            this._callDestroy.subscribe(function (delay) {
                _this.destroy(delay);
            });
        };
        CardComponent.prototype.destroy = function (delay) {
            var _this = this;
            if (delay === void 0) { delay = 0; }
            setTimeout(function () {
                _this.element.remove();
            }, 200);
        };
        CardComponent.prototype.ngAfterViewChecked = function () {
            if (this.element.parentElement) {
                var height = this.element.parentElement.clientHeight;
                var width = this.element.parentElement.clientWidth;
                this.renderer.setElementStyle(this.element, "height", height + 'px');
                this.renderer.setElementStyle(this.element, "width", width + 'px');
                this.releaseRadius = {
                    x: width / 4,
                    y: height / 4
                };
            }
        };
        CardComponent.prototype.onPan = function (event) {
            if (!this.fixed && !this.released) {
                this.onSwipeCb(event);
                if (this.onSwipe) {
                    this.onSwipe.emit(event);
                }
            }
        };
        CardComponent.prototype.onPanEnd = function (event) {
            if (!this.fixed && !this.released) {
                if ((this._orientation == "x" && (this.releaseRadius.x < event.deltaX || this.releaseRadius.x * -1 > event.deltaX)) ||
                    (this._orientation == "y" && (this.releaseRadius.y < event.deltaY || this.releaseRadius.y * -1 > event.deltaY)) ||
                    ((this.releaseRadius.x < event.deltaX || this.releaseRadius.x * -1 > event.deltaX) ||
                        (this.releaseRadius.y < event.deltaY || this.releaseRadius.y * -1 > event.deltaY))) {
                    if (this.onRelease) {
                        this.released = true;
                        this.onRelease.emit(event);
                    }
                }
                else {
                    this.onAbortCb(event);
                    if (this.onAbort) {
                        this.onAbort.emit(event);
                    }
                }
            }
        };
        CardComponent.prototype.ngOnDestroy = function () {
            if (this._callDestroy) {
                this._callDestroy.unsubscribe();
            }
        };
        return CardComponent;
    }());
    CardComponent.decorators = [
        { type: _angular_core.Component, args: [{
                    template: '<ng-content></ng-content>',
                    selector: 'sc-card',
                    styles: [":host {\n      transition: transform 1s ease;\n      position: absolute;\n      border-radius: 2px;\n      border: 1px solid white;\n      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3) !important;\n      transition: transform 0.2s ease;\n      background-color: white;\n      touch-action: none !important;\n    }\n    :host(.card-heap) {\n      transition: transform 1s ease;\n      display: block;\n      position: absolute;\n      background-color: white;\n      box-shadow: 0 0 0 rgba(0, 0, 0, 0) !important;\n      transform: perspective(400px) translate3d(0, 30px, -30px);\n      visibility: hidden;\n    }\n\n    :host(.card-heap):nth-child(1) {\n      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3) !important;\n      z-index:3;\n      visibility: visible;\n      transform: perspective(400px) translate3d(0, 0px, 0px);\n    }\n    :host(.card-heap):nth-child(2) {\n      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3) !important;\n      z-index:2;\n      visibility: visible;\n      transform: perspective(400px) translate3d(0, 30px, -30px);\n    }\n    :host(.card-heap):nth-child(3) {\n      box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3) !important;\n      z-index:1;\n      visibility: visible;\n      transform: perspective(400px) translate3d(0, 60px, -60px);\n    }\n\n    :host .card-overlay {\n      transform: translateZ(0);\n      opacity: 0;\n      border-radius: 2px;\n      position: absolute;\n      width: 100%;\n      height: 10px;\n      top: 0;\n      left: 0;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      overflow: hidden;\n      color: white;\n    }\n"]
                },] },
    ];
    /** @nocollapse */
    CardComponent.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
        { type: _angular_core.Renderer, },
    ]; };
    CardComponent.propDecorators = {
        'fixed': [{ type: _angular_core.Input },],
        'orientation': [{ type: _angular_core.Input, args: ['orientation',] },],
        'callDestroy': [{ type: _angular_core.Input, args: ['callDestroy',] },],
        'onRelease': [{ type: _angular_core.Output },],
        'onSwipe': [{ type: _angular_core.Output },],
        'onAbort': [{ type: _angular_core.Output },],
        'onPan': [{ type: _angular_core.HostListener, args: ['pan', ['$event'],] },],
        'onPanEnd': [{ type: _angular_core.HostListener, args: ['panend', ['$event'],] },],
    };
    var TinderCardDirective = (function () {
        function TinderCardDirective(el, renderer) {
            this.orientation = 'xy';
            this.onLike = new _angular_core.EventEmitter();
            this.renderer = renderer;
            this.element = el.nativeElement;
        }
        Object.defineProperty(TinderCardDirective.prototype, "overlay", {
            set: function (value) {
                this._overlay = value || {};
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TinderCardDirective.prototype, "callLike", {
            set: function (value) {
                this._callLike = value || new _angular_core.EventEmitter();
                this.initCallLike();
            },
            enumerable: true,
            configurable: true
        });
        TinderCardDirective.prototype.onReleaseLikeCb = function (event) {
            this.like = event.like;
            var el = this.element;
            var x = (el.offsetWidth + el.clientWidth) * ((!!event.like ? 1 : -1) || 0);
            var rotate = (x * 20) / el.clientWidth;
            if (this._overlay) {
                var overlayElm = this.element.querySelector('.tinder-overlay');
                this.renderer.setElementStyle(overlayElm, "transition", "transform 0.6s ease");
                this.renderer.setElementStyle(overlayElm, "opacity", "0.5");
            }
        };
        TinderCardDirective.prototype.onSwipeLikeCb = function (event) {
            if (this._overlay) {
                var overlayElm = this.element.querySelector('.tinder-overlay');
                this.renderer.setElementStyle(overlayElm, "transition", "opacity 0s ease");
                var opacity = (event.distance < 0 ? event.distance * -1 : event.distance) * 0.5 / this.element.offsetWidth;
                this.renderer.setElementStyle(overlayElm, "opacity", opacity.toString());
            }
        };
        TinderCardDirective.prototype.destroy = function (delay) {
            var _this = this;
            if (delay === void 0) { delay = 0; }
            setTimeout(function () {
                _this.element.remove();
            }, 200);
        };
        TinderCardDirective.prototype.onSwipe = function (event) {
            var like = (this.orientation === "y" && event.deltaY < 0) ||
                (this.orientation !== "y" && event.deltaX > 0);
            var opacity = (event.distance < 0 ? event.distance * -1 : event.distance) * 0.5 / this.element.offsetWidth;
            if (!!this._overlay) {
                this.renderer.setElementStyle(this.overlayElement, "transition", "opacity 0s ease");
                this.renderer.setElementStyle(this.overlayElement, "opacity", opacity.toString());
                this.renderer.setElementStyle(this.overlayElement, "background-color", this._overlay[like ? "like" : "dislike"].backgroundColor);
            }
            this.translate({
                x: event.deltaX,
                y: event.deltaY,
                rotate: ((event.deltaX * 20) / this.element.clientWidth)
            });
        };
        TinderCardDirective.prototype.onAbort = function (event) {
            if (!!this._overlay) {
                this.renderer.setElementStyle(this.overlayElement, "transition", "opacity 0.2s ease");
                this.renderer.setElementStyle(this.overlayElement, "opacity", "0");
            }
        };
        TinderCardDirective.prototype.onRelease = function (event) {
            var like = (this.orientation === "y" && event.deltaY < 0) ||
                (this.orientation !== "y" && event.deltaX > 0);
            if (this._callLike) {
                this._callLike.emit({ like: like });
            }
            if (this.onLike) {
                this.onLike.emit({ like: like });
            }
        };
        TinderCardDirective.prototype.translate = function (params) {
            if (!this.fixed) {
                this.renderer.setElementStyle(this.element, "transition", "transform " + (params.time || 0) + "s ease");
                this.renderer.setElementStyle(this.element, "webkitTransform", "translate3d(" +
                    (params.x && (!this.orientation || this.orientation.indexOf("x") != -1) ? (params.x) : 0) +
                    "px, " +
                    (params.y && (!this.orientation || this.orientation.indexOf("y") != -1) ? (params.y) : 0) +
                    "px, 0) rotate(" +
                    params.rotate +
                    "deg)");
            }
        };
        TinderCardDirective.prototype.initOverlay = function () {
            if (!!this._overlay) {
                this.overlayElement = document.createElement("div");
                this.overlayElement.className += " card-overlay";
                this.element.appendChild(this.overlayElement);
                this.renderer.setElementStyle(this.overlayElement, "transform", "translateZ(0)");
                this.renderer.setElementStyle(this.overlayElement, "opacity", "0");
                this.renderer.setElementStyle(this.overlayElement, "border-radius", "2px");
                this.renderer.setElementStyle(this.overlayElement, "position", "absolute");
                this.renderer.setElementStyle(this.overlayElement, "width", "100%");
                this.renderer.setElementStyle(this.overlayElement, "height", "100%");
                this.renderer.setElementStyle(this.overlayElement, "top", "0");
                this.renderer.setElementStyle(this.overlayElement, "left", "0");
                this.renderer.setElementStyle(this.overlayElement, "display", "flex");
                this.renderer.setElementStyle(this.overlayElement, "align-items", "center");
                this.renderer.setElementStyle(this.overlayElement, "justify-content", "center");
                this.renderer.setElementStyle(this.overlayElement, "overflow", "hidden");
                this.renderer.setElementStyle(this.overlayElement, "color", "white");
            }
        };
        TinderCardDirective.prototype.ngOnInit = function () {
            this.initOverlay();
            this._overlay = this._overlay || {};
            this.orientation = this.orientation || "xy";
            this._callLike = this._callLike || new _angular_core.EventEmitter();
            this.initCallLike();
        };
        TinderCardDirective.prototype.initCallLike = function () {
            var _this = this;
            this._callLike.subscribe(function (params) {
                var el = _this.element;
                var x = (el.offsetWidth + el.clientWidth) * (params.like ? 1 : -1);
                var y = (el.offsetHeight + el.clientHeight) * (params.like ? -1 : 1);
                _this.translate({
                    x: x,
                    y: y,
                    rotate: (x * 20) / el.clientWidth,
                    time: 0.8
                });
                _this.renderer.setElementStyle(_this.overlayElement, "transition", "opacity 0.4s ease");
                _this.renderer.setElementStyle(_this.overlayElement, "opacity", "0.5");
                _this.renderer.setElementStyle(_this.overlayElement, "background-color", _this._overlay[params.like ? "like" : "dislike"].backgroundColor);
                _this.destroy(200);
            });
        };
        TinderCardDirective.prototype.ngOnChanges = function (changes) {
            if (changes.callLike) {
                this._callLike = changes.callLike.currentValue || changes.callLike.previousValue || new _angular_core.EventEmitter();
                this.initCallLike();
            }
            if (changes.overlay) {
                this._overlay = changes.overlay.currentValue || changes.overlay.previousValue || {};
            }
        };
        TinderCardDirective.prototype.ngOnDestroy = function () {
            if (this._callLike) {
                this._callLike.unsubscribe();
            }
        };
        return TinderCardDirective;
    }());
    TinderCardDirective.decorators = [
        { type: _angular_core.Directive, args: [{
                    selector: '[tinder-card]',
                    host: {
                        class: 'card-heap'
                    }
                },] },
    ];
    /** @nocollapse */
    TinderCardDirective.ctorParameters = function () { return [
        { type: _angular_core.ElementRef, },
        { type: _angular_core.Renderer, },
    ]; };
    TinderCardDirective.propDecorators = {
        'overlay': [{ type: _angular_core.Input, args: ['tinder-card',] },],
        'callLike': [{ type: _angular_core.Input, args: ['callLike',] },],
        'fixed': [{ type: _angular_core.Input },],
        'orientation': [{ type: _angular_core.Input },],
        'onLike': [{ type: _angular_core.Output },],
        'onSwipe': [{ type: _angular_core.HostListener, args: ['onSwipe', ['$event'],] },],
        'onAbort': [{ type: _angular_core.HostListener, args: ['onAbort', ['$event'],] },],
        'onRelease': [{ type: _angular_core.HostListener, args: ['onRelease', ['$event'],] },],
    };
    var HammerConfig = (function (_super) {
        __extends(HammerConfig, _super);
        function HammerConfig() {
            _super.apply(this, arguments);
            this.overrides = {
                'pan': { enable: true }
            };
        }
        return HammerConfig;
    }(_angular_platformBrowser.HammerGestureConfig));
    var SwipeCardsModule = (function () {
        function SwipeCardsModule() {
        }
        return SwipeCardsModule;
    }());
    SwipeCardsModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    imports: [
                        _angular_common.CommonModule
                    ],
                    declarations: [
                        CardComponent,
                        TinderCardDirective
                    ],
                    exports: [
                        CardComponent,
                        TinderCardDirective
                    ],
                    providers: [{
                            provide: _angular_platformBrowser.HAMMER_GESTURE_CONFIG,
                            useClass: HammerConfig
                        }]
                },] },
    ];
    /** @nocollapse */
    SwipeCardsModule.ctorParameters = function () { return []; };
    exports.SwipeCardsModule = SwipeCardsModule;
}));
